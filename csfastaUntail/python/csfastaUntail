#!/usr/bin/env python


#                     csfastaUntail
#                     -------------
#                     For all reads with trailing 0's, chop this tail off and
#                     write to a file.
#
#                     July 2010  /  Daniel Jones <dcjones@cs.washington.edu>
#


from sys                   import argv, stdin, stdout, stderr
from collections           import namedtuple
import re

color_read = namedtuple( 'color_read', 'name seq qual' )

class csfasta_iter:
    ''' Iterate through a read/qual file pair. '''

    def __init__( self, reads_fn, quals_fn ):
        self.reads_f = open(reads_fn)
        self.quals_f = open(quals_fn)


    def __iter__(self):
        return self


    def next_line(self,f):
        line = '#'

        while line[0] == '#':
            line = f.readline()
            if not line:
                return None

        return line.strip()


    def next(self):
        r_name = self.next_line(self.reads_f)
        seq    = self.next_line(self.reads_f)

        q_name = self.next_line(self.quals_f)
        quals  = self.next_line(self.quals_f)

        if None in (r_name,seq,q_name,quals):
            raise StopIteration

        if r_name != q_name:
            raise Exception( "Mismatched .csfasta .qual files." )

        return color_read(r_name[1:], seq, map(int,quals.split()))

class csfasta_writer:
    ''' Write csfasta/qual pairs. '''

    def __init__( self, reads_fn, quals_fn ):
        self.reads_f = open(reads_fn,'w')
        self.quals_f = open(quals_fn,'w')

    def write( self, cr ):
        self.reads_f.write( '>' + cr.name + '\n' )
        self.reads_f.write( cr.seq + '\n' )
        self.quals_f.write( '>' + cr.name + '\n' )
        self.quals_f.write( ' '.join(map(str,cr.qual)) + '\n' )





def usage():
    stderr.write( 'Usage: csfastaUntail in.csfasta in.qual out.csfasta out.qual\n' )

if __name__ == '__main__':
    if len(argv) < 5:
        usage()
        exit(1)

    out = csfasta_writer( argv[3], argv[4] )

    tail_pat = re.compile( r'([0123\.]*[123])[0\.]+$' )

    for cr in csfasta_iter( argv[1], argv[2] ):
        mat = tail_pat.search( cr.seq )
        if mat:
            out.write( color_read( cr.name,
                                   mat.group(1),
                                   cr.qual[:len(mat.group(1))], ) )




