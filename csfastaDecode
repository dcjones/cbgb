#!/usr/bin/python

#                     csfastaDecode
#                     -------------
#                     Decode colorspace csfasta/qual files into nucleotide
#                     fastq files, assuming reads have an initial primer
#                     base.
#
#                     Reported quality scores are the sums of overlaping pairs.
#
#                     Note: this should only be used when there are not
#                     native colorspace tools available.
#                     
#                     This depends on AB's python library 'agapython' packaged
#                     with 'Corona Lite'.
#
#
#                     July 2010  /  Daniel Jones <dcjones@cs.washington.edu>
#
#

from agapython.util.Dibase import decodeSequence
from sys                   import argv, stdin, stdout, stderr
from collections           import namedtuple
from itertools             import izip
from operator              import add


color_read = namedtuple( 'color_read', 'name seq qual' )

class csfasta_iter:
    ''' Iterate through a read/qual file pair. '''

    def __init__( self, reads_fn, quals_fn ):
        self.reads_f = open(reads_fn)
        self.quals_f = open(quals_fn)


    def __iter__(self):
        return self


    def next_line(self,f):
        line = '#'

        while line[0] == '#':
            line = f.readline()
            if not line:
                return None

        return line.strip()


    def next(self):
        r_name = self.next_line(self.reads_f)
        seq    = self.next_line(self.reads_f)

        q_name = self.next_line(self.quals_f)
        quals  = self.next_line(self.quals_f)

        if None in (r_name,seq,q_name,quals):
            raise StopIteration

        if r_name != q_name:
            raise Exception( "Mismatched .csfasta .qual files." )

        return color_read(r_name[1:], seq, map(int,quals.split()))


def decode_quals( qs ):
    ''' Decode qualities by summing overlapping pairs. '''
    return [ q_i+q_j for (q_i,q_j) in izip( qs[:-1], qs[1:] ) ] + [ qs[-1] ]


def ascii_quals( qs ):
    ''' Convert numerical qualities to ASCII. '''
    return reduce( add, [ chr(q+35) for q in qs ] )


def usage():
    stderr.write( 'Usage: csfastaDecode in.csfasta in.qual\n' )


if __name__ == '__main__':
    if len(argv) < 3:
        usage()
        exit(1)

    for cr in csfasta_iter( argv[1], argv[2] ):
        stdout.write( '@{name}\n{seq}\n+{name}\n{qual}\n'.format(
            name = cr.name,
            seq   = decodeSequence(cr.seq),
            qual  = ascii_quals(decode_quals(cr.qual))
            ) )

