#!/usr/bin/env python

import re
from collections import namedtuple, defaultdict
from copy        import copy
from sys         import argv, stdout, stdin, stderr
from itertools   import izip
from bisect      import bisect_left

gtf_row = namedtuple( 'gtf_row', 'seqname source feature start end ' \
                                 'score strand frame attributes' )

def gtf_row_from_gtf_line( line ):
    line = line.split('\t')
    if len(line) < 9:
        raise TypeError

    seqname = line[0]
    source  = line[1]
    feature = line[2]

    # gff/gtf is 1-based, end-inclusive
    start   = int(line[3])
    end     = int(line[4])

    score   = line[5]
    strand  = line[6]
    frame      = line[7]
    attributes = {}

    for mat in re.finditer( r'\s*(\w+)\s+(([\.\w]+)|"([\.\w]+)")\s*;', line[8] ):
        attributes[mat.group(1)] = mat.group(2) # .strip('"')

    return gtf_row( seqname, source, feature, \
                    start, end, score, strand, frame, \
                    attributes )



def parse_gtf( gtf_f ):
    ''' extract annotations from a gtf file '''

    stderr.write( 'parsing GTF ... ' )

    rows = []
    i = 0
    for line in gtf_f:
        i+=1

        try:
            row = gtf_row_from_gtf_line( line )
        except TypeError:
            stderr.write( 'Only %d fields found on line %d. Skipping.\n' % \
                          (len(line.split('\t')), i, gtf_fn) )
            continue

        if row.feature == 'exon':
            rows.append( row )

    stderr.write( 'done (%d rows).\n' % len(rows) )

    return rows


bed_row = namedtuple( 'bed_row', 'seqname start end name score strand' )

def bed_row_from_bed_line( line ):
    line = line.split('\t')
    if len(line) < 3:
        raise TypeError

    seqname = line[0]
    start   = int(line[1])
    end     = int(line[2])
    name    = line[3] if len(line) > 3 else None
    score   = line[4] if len(line) > 4 else None
    strand  = line[5] if len(line) > 5 and line[5] in ('+','-') else None

    return bed_row( seqname, start, end, name, score, strand )


def parse_bed( bed_f ):

    stderr.write( 'parsing BED ... ' )

    i = 0
    rows = []
    for line in bed_f:
        i += 1
        try:
            row = bed_row_from_bed_line(line)
        except TypeError:
            stderr.write( 'BED line %d is malformed. Skipping.\n' % i )
            continue

        rows.append(row)

    stderr.write( 'done (%d rows).\n' % len(rows) )

    return rows


def nearest( xs, y ):
    if not xs:
        return None

    i = bisect_left( xs, y )
    if i == 0:
        return i
    elif i == len(xs):
        return i-1
    elif y-xs[i-1] >= xs[i]-y:
        return i
    else:
        return i-1



def nearest_neighbors( gtf_rows, bed_rows, attrib, stranded=False ):

    stderr.write( 'finding nearest annotation ...\n' )

    stderr.write( '\tindexing ...\n' )
    # organize by position
    annotations = defaultdict(list)
    for row in gtf_rows:
        if stranded: seq = (row.seqname,row.strand)
        else:        seq = row.seqname
        annotations[seq].append(row)

    annotation_starts = dict()
    annotation_ends   = dict()
    for seq in annotations:
        annotations[seq].sort( key = lambda row: row.start )
        annotation_starts[seq] = [ row.start for row in annotations[seq] ]
        annotation_ends[seq]   = [ row.end   for row in annotations[seq] ]


    # find neighbors
    stderr.write( '\tsearching ...\n' )
    upstream   = dict()
    downstream = dict()
    for row in bed_rows:
        if stranded: seq = (row.seqname,row.strand)
        else:        seq = row.seqname

        starts = annotation_starts[seq]
        ends   = annotation_ends[seq]

        i = bisect_left( ends, row.start )
        upstream[row] = annotations[seq][i-1].attributes[attrib] if i > 0 else None

        i = bisect_left( ends, row.start )
        downstream[row] = annotations[seq][i].attributes[attrib] if i < len(annotations[seq]) else None

    # merge
    neighbors = dict()
    for row in upstream:
        neighbors[row] = (upstream[row],downstream[row])

    stderr.write( 'done.\n' )
    return neighbors


def print_neighbors( neighbors ):


    for (row,(left,right)) in neighbors.iteritems():
        stdout.write( '{seqname}\t{start}\t{end}'.format(
            seqname = row.seqname,
            start   = row.start,
            end     = row.end))

        if row.name or row.score or row.strand:
            stdout.write( '\t%s' % (row.name if row.name else '.') )

        if row.score or row.strand:
            stdout.write( '\t%s' % (row.score if row.score else '.') )

        if row.strand:
            stdout.write( '\t%s' % row.strand )


        stdout.write( '\t%s\t%s\n' % (left,right) )



def usage():
    stderr.write( 'nearest_gene genes.gtf regions.bed [attribute]\n' )



def main():
    if len(argv) < 3:
        usage()
        exit(1)

    gtf_fn = argv[1]
    bed_fn = argv[2]
    attrib = argv[3] if len(argv) > 3 else 'gene_id'

    gtf_rows = parse_gtf( open(gtf_fn) )
    bed_rows = parse_bed( open(bed_fn) )

    neighbors = nearest_neighbors( gtf_rows, bed_rows, attrib )


    print_neighbors(neighbors)



if __name__ == '__main__': main()





