#!/usr/bin/env python

from sys         import argv, stdout, stdin, stderr
from collections import namedtuple, defaultdict
from optparse    import make_option, OptionParser
from itertools   import imap
import re
import MySQLdb


usage = 'mysqlimport_bed [OPTIONS] database input.bed [N:col_name:col_type ... ]'
option_list = [ make_option( '-t', '--table', action='store', type='string',
                             dest='table', default=None ) ]


bed_row = namedtuple( 'bed_row', 'seqname start end name score strand extra' )

def bed_row_from_bed_line( line ):
    line = line.strip().split('\t')
    if len(line) < 3:
        raise TypeError

    seqname = line[0]
    start   = int(line[1])
    end     = int(line[2])
    name    = line[3] if len(line) > 3 else ''
    score   = line[4] if len(line) > 4 else 0.0
    strand  = line[5] if len(line) > 5 and line[5] in ('+','-') else '.'
    extra   = line[6:] if len(line) > 6 else []

    return bed_row( seqname, start, end, name, score, strand, extra )


def parse_bed( bed_f ):

    stderr.write( 'parsing BED ... ' )

    i = 0
    rows = []
    for line in bed_f:
        i += 1
        try:
            row = bed_row_from_bed_line(line)
        except TypeError:
            stderr.write( 'BED line %d is malformed. Skipping.\n' % i )
            continue

        rows.append(row)

    stderr.write( 'done (%d rows).\n' % len(rows) )

    return rows



def insert_rows( db, table_name, rows, extra_cols ):
    c = db.cursor()

    c.execute( 'drop table if exists `{table_name}`'.format( table_name = table_name ) )

    table_spec = \
                '( ' \
                '`chrom` varchar(255) NOT NULL, ' \
                '`start` int(10) unsigned NOT NULL, ' \
                '`end` int(10) unsigned NOT NULL, ' \
                '`name` varchar(255) NOT NULL, ' \
                '`score` float NOT NULL, ' \
                '`strand` char(1) NOT NULL'

    for extra_col in extra_cols:
        table_spec += ', `{name}` {type} NOT NULL'.format( \
                name = extra_col[1], type =extra_col[2] )
    table_spec += ', index (`chrom`, `start`, `end`) )'

    c.execute( 'create table `{table_name}` {table_spec}'.format( \
                    table_name = table_name,
                    table_spec = table_spec ) )


    cols = '( `chrom`, `start`, `end`, `name`, `score`, `strand`'
    for extra_col in extra_cols:
        cols += ', `' + extra_col[1] + '`'
    cols += ' )'


    q = 'insert into `{table_name}` {cols} ' + \
                   'values ( ' + \
                   ', '.join(['%s']*(6+len(extra_cols))) + \
                   ' )'
    q = q.format( table_name = table_name, cols = cols )

    for row in rows:
        row_sub = list(row[:6])
        for extra_col in extra_cols:
            row_sub.append( row.extra[int(extra_col[0])-1] )
        c.execute( q, row_sub )


def main():
    optparser = OptionParser( option_list = option_list, usage = usage )
    (options,args) = optparser.parse_args()

    if len(args) < 2:
        optparser.error( 'Too few arguments.' )

    db = MySQLdb.connect( db = args[0] )

    rows = parse_bed( open(args[1]) )

    if options.table:
        table_name = options.table
    else:
        table_name = re.sub( r'\.bed$', '', args[1].split('/')[-1] )

    extra_cols =  [ c.split(':') for c in args[2:] ]
    insert_rows( db, table_name, rows, extra_cols )





if __name__ == '__main__':
    main()


