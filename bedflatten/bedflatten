#!/usr/bin/env python


from collections import namedtuple, defaultdict
from sys         import argv, stdout, stdin, stderr
import re

bed_row = namedtuple( 'bed_row', 'seqname start end name score strand extra' )

def bed_row_from_bed_line( line ):
    line = line.strip('\n').split('\t')
    if len(line) < 3:
        raise TypeError

    seqname = line[0]
    start   = int(line[1])
    end     = int(line[2])
    name    = line[3] if len(line) > 3 else ''
    score   = line[4] if len(line) > 4 else 0.0
    strand  = line[5] if len(line) > 5 and line[5] in ('+','-') else '.'
    extra   = line[6:] if len(line) > 6 else []

    return bed_row( seqname, start, end, name, score, strand, extra )

def parse_bed( bed_f ):

    stderr.write( 'parsing BED ... ' )

    i = 0
    rows = []
    for line in bed_f:
        i += 1
        try:
            row = bed_row_from_bed_line(line)
        except TypeError:
            stderr.write( 'BED line %d is malformed. Skipping.\n' % i )
            continue

        rows.append(row)

    stderr.write( 'done (%d rows).\n' % len(rows) )

    return rows


def min_exp_str( a, b ):
    a_exp = int(re.search( r'e([+-]\d+)', a ).group(1))
    b_exp = int(re.search( r'e([+-]\d+)', b ).group(1))

    if   a_exp < b_exp: return a
    elif a_exp > b_exp: return b

    a_part = float(re.search( r'e([+-][\.\d]+)', a ).group(1))
    b_part = float(re.search( r'e([+-][\.\d]+)', b ).group(1))

    if   a_part < b_part: return a
    elif a_part > b_part: return b

    return a


def merge_bed_rows( row1, row2 ):
    assert row1.strand == row2.strand
    assert row1.seqname == row2.seqname

    name = '%s;%s' % (row1.name,row2.name) if row1.name != row2.name else row1.name

    # drop anything extra for now
    return bed_row( seqname = row1.seqname,
                    start   = min(row1.start,row2.start),
                    end     = max(row1.end,row2.end),
                    name    = name,
                    score   = min_exp_str(row1.score,row2.score),
                    strand  = row1.strand,
                    extra   = [] )



def print_bed( fout, rows ):

    bed_str = '{seqname}\t{start}\t{end}\t{name}\t{score}\t{strand}\n'

    for row in rows:
        fout.write( bed_str.format(
            seqname = row.seqname,
            start   = row.start,
            end     = row.end,
            name    = row.name,
            score   = row.score,
            strand  = row.strand ) )




def main():
    rows = parse_bed(stdin)
    rows.sort( key = lambda row: (row.seqname,row.strand,row.start,row.end) )

    i = 0
    j = 1
    while j < len(rows):
        if rows[i] == None:
            i += 1
            continue

        if rows[j] == None:
            j += 1
            continue

        if i >= j:
            j += 1
            continue


        if (rows[i].seqname, rows[i].strand) != (rows[j].seqname,rows[j].strand):
            i += 1
            j += 1
            continue

        if rows[i].end >= rows[j].start:
            rows[i] = merge_bed_rows( rows[i], rows[j] )
            rows[j] = None
        else:
            i += 1

    rows = [ row for row in rows if row != None ]

    print_bed( stdout, rows )


if __name__ == '__main__':
    main()
